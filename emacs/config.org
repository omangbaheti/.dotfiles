#+TITLE: Emacs Config
#+DESCRIPTION: Personal Config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#package-manager][Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
- [[#buffer-move][BUFFER-MOVE]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#gui-tweaks][GUI TWEAKS]]
  - [[#disable-menubar-toolbar][Disable Menubar, Toolbar]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#source-code-block-expansion][Source Code Block Expansion]]
- [[#which-key][WHICH-KEY]]
- [[#sudo-edit][SUDO EDIT]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#ivy-counsel][IVY (COUNSEL)]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Package Manager

#+BEGIN_SRC emacs-lisp :tangle yes
        (defvar elpaca-installer-version 0.11)
        (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
        (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
        (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
        (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                      :ref nil :depth 1 :inherit ignore
                                      :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                      :build (:not elpaca--activate-package)))
        (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
               (build (expand-file-name "elpaca/" elpaca-builds-directory))
               (order (cdr elpaca-order))
               (default-directory repo))
          (add-to-list 'load-path (if (file-exists-p build) build repo))
          (unless (file-exists-p repo)
            (make-directory repo t)
            (when (<= emacs-major-version 28) (require 'subr-x))
            (condition-case-unless-debug err
                (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                          ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                          ,@(when-let* ((depth (plist-get order :depth)))
                                                              (list (format "--depth=%d" depth) "--no-single-branch"))
                                                          ,(plist-get order :repo) ,repo))))
                          ((zerop (call-process "git" nil buffer t "checkout"
                                                (or (plist-get order :ref) "--"))))
                          (emacs (concat invocation-directory invocation-name))
                          ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                                "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                          ((require 'elpaca))
                          ((elpaca-generate-autoloads "elpaca" repo)))
                    (progn (message "%s" (buffer-string)) (kill-buffer buffer))
                  (error "%s" (with-current-buffer buffer (buffer-string))))
              ((error) (warn "%s" err) (delete-directory repo 'recursive))))
          (unless (require 'elpaca-autoloads nil t)
            (require 'elpaca)
            (elpaca-generate-autoloads "elpaca" repo)
            (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
        (add-hook 'after-init-hook #'elpaca-process-queues)
        (elpaca `(,@elpaca-order))
#+END_SRC

** Load Evil Mode

#+BEGIN_SRC emacs-lisp
    ;; Install use-package support

  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

    ;; Block until current queue processed.
    (elpaca-wait)


    ;; Expands to: (elpaca evil (use-package evil :demand t))
    (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinging nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (evil-mode))

    (use-package evil-collection
      :after evil
      :config
      (setq evil-collection-mode-list '(dashboard dired ibuffer))
      (evil-collection-init))
    (use-package evil-tutor)

    ;;Turns off elpaca-use-package-mode current declaration
    ;;Note this will cause evaluate the declaration immediately. It is not deferred.
    ;;Useful for configuring built-in emacs features.
    (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+END_SRC


**General Keybindings

#+BEGIN_SRC emacs-lisp

  (use-package general
    :config
    (general-evil-setup)

    ;; set up 'SPC' as the global leader key
    (general-create-definer leader-key
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode
  (setq evil-want-keybinding nil)
  (leader-key
    "." '(find-file :wk "Find file")
    "f c" '((lambda () (interactive) (find-file "~/.dotfiles/emacs/config.org")) :wk "Edit emacs config")
    "f r" '(counsel-recentf :wk "Find Recent Files")
    "TAB TAB" '(comment-line :wk "Comment lines"))

     (leader-key
      "b" '(:ignore t :wk "buffer")
      "b b" '(switch-to-buffer :wk "Switch buffer")
      "b i" '(ibuffer :wk "Ibuffer")
      "b k" '(kill-this-buffer :wk "Kill this buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer"))
    
    (leader-key
      "e" '(:ignore t :wk "Evaluate")
      "e b" '(eval-buffer :wk "Evaluate the elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate elisp expression")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expressions before point")
      "e r" '(eval-region :wk "Evaluate elisp in region"))

    (leader-key
      "h" '(:ignore t :wk "Help")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe Variable")
      "h r r" '((lambda() (interactive) (load-file "~/.dotfiles/emacs/init.el")) :wk "reload emacs config"))

    (leader-key
      "t" '(:ignore t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t t" '(visual-line-mode :wk "Toggle truncated lines"))

    (leader-key
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines"))

    (leader-key
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window Left")
    "w j" '(evil-window-down :wk "Window Down")
    "w k" '(evil-window-up :wk "Window Up")
    "w l" '(evil-window-right :wk "Window Right")
    "w w" '(evil-window-next :wk "Goto Next Window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer Move Left")
    "w J" '(buf-move-down :wk "Buffer Move Down")
    "w K" '(buf-move-up :wk "Buffer Move Up")
    "w L" '(buf-move-right :wk "Buffer Move Right"))
  )
#+END_SRC

* BUFFER-MOVE
Creating some functions to allow us to easily move windows (splits) around.  The following block of code was taken from buffer-move.el found on the EmacsWiki:
https://www.emacswiki.org/emacs/buffer-move.el

#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* FONTS
Defining the fonts

** Setting the Font Face

#+begin_src emacs-lisp
    ;; Setting the default font
    (set-face-attribute 'default nil
          :font "JetBrainsMono Nerd Font"
          :height 110
          :weight 'medium)
    ;; Setting font for variable pitch
  (set-face-attribute 'variable-pitch nil
                      :family (or (car (seq-filter
                                        (lambda (f) (member f (font-family-list)))
                                        '("Ubuntu" "DejaVu Sans" "Arial")))
                                  "Sans")
                      :height 140)
  ;;Setting font for fixed pitch
    (set-face-attribute 'fixed-pitch nil
          :font "JetBrainsMono Nerd Font"
          :height 110
          :weight 'medium)

    ;; Makes commented text and keywords  italics
    (set-face-attribute 'font-lock-comment-face nil
          :slant 'italic)
    (set-face-attribute 'font-lock-keyword-face nil
          :slant 'italic)

    (add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font-11"))
    (setq-default line-spacing 0.12)

#+end_src

** Zooming In/Out
Using Ctrl plus =/- for zooming in and out. Also ctrl plus scroll wheel

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* GUI TWEAKS

** Disable Menubar, Toolbar
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

* ORG MODE
** Enabling Table of Contents

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent
Org mode has weird indentation
#+begin_src emacs-lisp
(electric-indent-mode -1)
#+end_src

** Source Code Block Expansion
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |


#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src


* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " → " ))
#+end_src

* SUDO EDIT
Sudo-edit gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.
#+begin_src emacs-lisp
  (use-package sudo-edit
    :config 
   (leader-key
     "fu" '(sudo-edit-find-file :wk "Sudo find file")
     "fU" '(sudo-edit :wk "Sudo Edit File")))
#+end_src

* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))
  
  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
#+end_src
