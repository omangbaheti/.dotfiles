#+TITLE: Emacs Config
#+DESCRIPTION: Personal Config
#+STARTUP: showeverything
#+OPTIONS: toc:3

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#package-manager][Package Manager]]
  - [[#benchmarking][Benchmarking]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#hydra][HYDRA]]
  - [[#casual][CASUAL]]
  - [[#general-keybindings][General Keybindings]]
  - [[#pulsar][Pulsar]]
- [[#closing-minibuffers][CLOSING MINIBUFFERS]]
- [[#buffer-move][BUFFER-MOVE]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#emacs-sane-defaults][EMACS SANE DEFAULTS]]
  - [[#disable-menubar-toolbar][Disable Menubar, Toolbar]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#backups][Backups]]
  - [[#minibuffer-escape][Minibuffer escape]]
  - [[#electric][Electric]]
  - [[#undo-fu][UNDO-FU]]
- [[#org-mode][ORG MODE]]
  - [[#evil-org][EVIL ORG]]
  - [[#enabling-table-of-content][Enabling Table of Content]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#source-code-block-expansion][Source Code Block Expansion]]
  - [[#modern-org][MODERN ORG]]
  - [[#nano-prettify][NANO Prettify]]
  - [[#olivetti-centering][OLIVETTI (Centering)]]
  - [[#org-agenda][ORG-AGENDA]]
  - [[#org-supertag][ORG-SUPERTAG]]
  - [[#org-roam][ORG ROAM]]
  - [[#org-noter][ORG NOTER]]
  - [[#org-transclusion][ORG TRANSCLUSION]]
  - [[#ansi-support][ANSI SUPPORT]]
- [[#which-key][WHICH-KEY]]
- [[#sudo-edit][SUDO EDIT]]
- [[#icons][ICONS]]
  - [[#nerd-icons][NERD ICONS]]
- [[#vertico][VERTICO]]
  - [[#zoxide][ZOXIDE]]
- [[#marginalia][MARGINALIA]]
- [[#orderless][ORDERLESS]]
- [[#prescient][PRESCIENT]]
- [[#consult][CONSULT]]
- [[#embark][EMBARK]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#vterm][Vterm]]
- [[#theming][THEMING]]
  - [[#doom-themes][Doom Themes]]
  - [[#doom-modeline-setups][Doom modeline setups]]
- [[#filemanager][FILEMANAGER]]
  - [[#neotree][NEOTREE]]
- [[#flycheck][FLYCHECK]]
- [[#tree-sitter][TREE-SITTER]]
- [[#lsps][LSPs]]
  - [[#yasnippet][YASNIPPET]]
- [[#projectile][PROJECTILE]]
- [[#dashboard][DASHBOARD]]
- [[#jupyter][JUPYTER]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#latex][LATEX]]
  - [[#pdf-tools][Pdf-Tools]]
  - [[#citar][Citar]]
  - [[#misc-writing-tools][Misc writing tools]]
- [[#git][GIT]]
- [[#transient][TRANSIENT]]
- [[#deadgrep][DEADGREP]]
- [[#spacious-padding][SPACIOUS PADDING]]
- [[#prettifying][Prettifying]]
- [[#][]]
- [[#nano-elfeed][NANO ELFEED]]
- [[#org-kanban][ORG KANBAN]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Package Manager

#+BEGIN_SRC emacs-lisp :tangle yes
;;(setq debug-on-error t)
(setq warning-minimum-level :error)
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))


;; Install use-package support

(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)
#+END_SRC


** Benchmarking

#+begin_src emacs-lisp
(use-package benchmark-init
  :ensure t
  :config
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src

** Load Evil Mode

#+BEGIN_SRC emacs-lisp
(setq evil-want-keybinding nil)
(use-package evil
  :init
  (setq evil-want-keybinging nil)
  (setq evil-want-integration t)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-search-module 'evil-search)
  (evil-mode))

(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
(use-package evil-tutor)

(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
  
  ;;setting RETURN key in org-mode to follow links
  (setq org-return-follows-link t)

;;Turns off elpaca-use-package-mode current declaration
;;Note this will cause evaluate the declaration immediately. It is not deferred.
;;Useful for configuring built-in emacs features.
(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+END_SRC

#+RESULTS:
: t


*** Evil-Snipe


*** Evil-goggles
#+begin_src emacs-lisp
(use-package evil-goggles
  :ensure t
  :config
  (evil-goggles-mode)
  (setq evil-goggles-enable-paste t)
  (setq evil-goggles-enable-yank t)
  (setq evil-goggles-duration 0.100) 
  ;; Define custom colors instead of using diff faces
  (custom-set-faces
   '(evil-goggles-delete-face ((t (:background "#ff6c6b" :foreground "white"))))
   '(evil-goggles-paste-face ((t (:background "#98be65" :foreground "black"))))
   '(evil-goggles-yank-face ((t (:background "#ECBE7B" :foreground "black"))))
   '(evil-goggles-indent-face ((t (:background "#FFFFFF" :foreground "black"))))
   '(evil-goggles-change-face ((t (:background "#c678dd" :foreground "white"))))))
#+end_src

** HYDRA
#+begin_src emacs-lisp
(use-package hydra
  :ensure t)

(use-package use-package-hydra
  :ensure t)
#+end_src

** CASUAL

#+begin_src emacs-lisp
(use-package casual
  :ensure t
  :config)
#+end_src

** General Keybindings
#+BEGIN_SRC emacs-lisp
(use-package general
  :config
  (general-evil-setup)
  ;; set up 'SPC' as the global leader key
  (general-create-definer leader-key
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (setq evil-want-keybinding nil)
  
  (general-define-key
   :states 'normal
   :keymaps 'override
   "<escape>" (lambda ()
                (interactive)
                (evil-ex-nohighlight)))
  (leader-key
    "SPC" '(consult-find-home :wk "Consult Find")
    "." '(find-file :wk "Find file")
    "f c" '((lambda () (interactive) (find-file "~/.dotfiles/emacs/config.org")) :wk "Edit emacs config")
    "f r" '(consult-recent-file :wk "Find Recent Files")
    "f /" '(consult-line :wk "Find Line")
    "TAB TAB" '(comment-line :wk "Comment lines"))

  (leader-key
    "a" '(:ignore t :wk "Agenda")
    "a o" '(nano-agenda :wk "Open Agenda")
    "a p" '(nano-agenda-popup :wk "Open Agenda popup")
    )

  (leader-key
    "b" '(:ignore t :wk "buffer")
    "b b" '(consult-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-buffer :wk "Kill buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    )

  (leader-key
    "k" '(consult-yank-from-kill-ring :wk "Yank from Kill Ring")
    )

  (leader-key
    "e" '(:ignore t :wk "Evaluate")
    "e b" '(eval-buffer :wk "Evaluate the elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expressions before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e s" '(eshell :which-key "Eshell")
    )
  
  (leader-key
    "m" '(:ignore t :wk "Org")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list")
    )



  (leader-key
    :states '(normal)
    "m n" '(org-babel-next-src-block :wk "Next src block")
    "m p" '(org-babel-previous-src-block :wk "Previous src block")
    )

  ;; (leader-key
  ;;   :states '(normal visual)
  ;;   "m s" '(:ignore t :wk "Insert Source Block Templates")
  ;;   "m s j" '(tempo-template-jupyter-python :wk "Insert Jupyter Python block")
  ;;   "m s p" '(tempo-template-python :wk "Insert Python block")
  ;;   "m s e" '(tempo-template-emacs-lisp :wk "Insert Emacs Lisp block"))

  (leader-key
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (leader-key
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))
  
  (leader-key
    "m c" '(:ignore t :wk "Org Capture")
    "m c s" '(org-roam-capture :wk "Org Capture"))
  
  ;; (leader-key
  ;;   "n" '(:ignore t :wk "Notes")
  ;;   "n o" '(citar-open :wk "Citar Open Note")
  ;;   "n s" '(citar-org-noter-open :wk "Org-Noter Session")
  ;;   "n n" '(citar-create-note :wk "Citar New Note")
  ;;   )
  
  (leader-key
    :states '(normal visual)
    "o" '(:ignore t :wk "More Org")
    
    "o t" '(:ignore t :wk "Transclusion")
    "o t t" '(org-transclusion-make-from-link :wk "Transcl. Atomic Note")
    "o t o" '(org-transclusion-open-source :wk "Open Transcl. in Buffer")
    "o t e" '(org-transclusion-live-sync-start :wk "Live Edit Transcl.")
    "o t r" '(org-transclusion-refresh :wk "Refresh Transcl.")
   

    "o r" '(:ignore t :wk "Org Roam")
    "o r i" '(org-roam-node-insert :wk "Link Node")
    "o r f" '(consult-org-roam-find-by-title :wk "Find Node")
    "o r s" '(org-roam-buffer-toggle-and-focus :wk "Show Backlink")
    "o r t" '(org-roam-tag-node-insert :wk "Roam Tag")
    "o r b" '(consult-org-roam-backlinks :wk "Backlinks")
    "o r r" '(consult-org-roam-backlinks-recursive :wk "Backlinks Recursive")
    "o r l" '(consult-org-roam-forward-links :wk "Forward Links")
 
    "o n" '(:ignore t :wk "Research Note")
    "o n n" '(citar-create-note :wk "New Research Note")
    "o n o" '(citar-open-note :wk "Open Note")
    "o n s" '(citar-org-noter-open :wk "Noter Session")
    "o n i" '(org-noter :wk "Noter Session Immediate")
    "o n f" '(citar-org-roam-open-current-refs :wk "Open Paper")
    
    "o s" '(:ignore t :wk "Insert Source Block Templates")
    "o s j" '(tempo-template-jupyter-python :wk "Insert Jupyter Python block")
    "o s p" '(tempo-template-python :wk "Insert Python block")
    "o s e" '(tempo-template-emacs-lisp :wk "Insert Emacs Lisp block")

    "o o" '(:ignore t :wk "Insert Source Block Templates")
    "o o e" '(olivetti-expand :wk "Expand")
    "o o s" '(olivetti-shrink :wk "Shrink")
    "o o o" '(olivetti-mode :wk "Toggle Olivetti")

    "o c" '(:ignore t :wk "Org Capture")
    "o c s" '(org-roam-capture :wk "Org Capture"))  

  (leader-key
    "'" '(vterm-toggle :wk "Toggle Vterm"))
  
  (leader-key
    "p" '(projectile-command-map :wk "Projectile"))
  
  (leader-key
    "t n" '(neotree-toggle :wk "Toggle neotree file viewer")) 
  
  (leader-key
    "h" '(:ignore t :wk "Help")
    "h p" '(describe-package :wk "Describe Package")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe Variable")
    "h r r" '((lambda() (interactive) (load-file "~/.dotfiles/emacs/init.el") (ignore (elpaca-process-queues))) :wk "Reload emacs config")
    "h r R" '((lambda() (interactive) (restart-emacs)) :wk "Complete restart emacs"))

  (leader-key
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines"))


  (leader-key
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window Left")
    "w j" '(evil-window-down :wk "Window Down")
    "w k" '(evil-window-up :wk "Window Up")
    "w l" '(evil-window-right :wk "Window Right")
    "w w" '(evil-window-next :wk "Goto Next Window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer Move Left")
    "w J" '(buf-move-down :wk "Buffer Move Down")
    "w K" '(buf-move-up :wk "Buffer Move Up")
    "w L" '(buf-move-right :wk "Buffer Move Right")))
#+END_SRC


** Pulsar
#+begin_src emacs-lisp
(use-package pulsar
  :ensure t
  :hook
  (after-init . pulsar-global-mode)
  :config
  (setq pulsar-pulse t)
  (setq pulsar-delay 0.025)
  (setq pulsar-iterations 20)
  (setq pulsar-face 'evil-ex-lazy-highlight)
  (add-to-list 'pulsar-pulse-functions 'evil-scroll-down)
  (add-to-list 'pulsar-pulse-functions 'flymake-goto-next-error)
  (add-to-list 'pulsar-pulse-functions 'flymake-goto-prev-error)
  (add-to-list 'pulsar-pulse-functions 'evil-yank)
  (add-to-list 'pulsar-pulse-functions 'evil-yank-line)
  (add-to-list 'pulsar-pulse-functions 'evil-delete)
  (add-to-list 'pulsar-pulse-functions 'evil-delete-line)
  (add-to-list 'pulsar-pulse-functions 'evil-jump-item)
  (add-to-list 'pulsar-pulse-functions 'diff-hl-next-hunk)
  (add-to-list 'pulsar-pulse-functions 'diff-hl-previous-hunk))
#+end_src


* CLOSING MINIBUFFERS

 "Do-What-I-Mean behaviour for a general `keyboard-quit'.

The generic `keyboard-quit' does not do the expected thing when
the minibuffer is open.  Whereas we want it to close the
minibuffer, even without explicitly focusing it.

The DWIM behaviour of this command is as follows:

- When the region is active, disable it.
- When a minibuffer is open, but not focused, close the minibuffer.
- When the Completions buffer is selected, close it.
- In every other case use the regular `keyboard-quit'."
#+begin_src emacs-lisp
(defun keyboard-quit-dwim ()
  (interactive)
  (cond
   ((region-active-p)
    (keyboard-quit))
   ((derived-mode-p 'completion-list-mode)
    (delete-completion-window))
   ((> (minibuffer-depth) 0)
    (abort-recursive-edit))
   (t
    (keyboard-quit))))

(define-key global-map (kbd "C-g") #'keyboard-quit-dwim)

#+end_src

* BUFFER-MOVE
Creating some functions to allow us to easily move windows (splits) around.  The following block of code was taken from buffer-move.el found on the EmacsWiki:
https://www.emacswiki.org/emacs/buffer-move.el

#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
  ;;  "Switches between the current buffer, and the buffer above the
  ;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
  "Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
  "Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
  "Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* FONTS
Defining the fonts

** Setting the Font Face

#+begin_src emacs-lisp
;; Setting the default font
(set-face-attribute 'default nil
		    :font "JetBrainsMono Nerd Font"
		    :height 110
		    :weight 'medium)
;; Setting font for variable pitch
(set-face-attribute 'variable-pitch nil
                    :family (or (car (seq-filter
                                      (lambda (f) (member f (font-family-list)))
                                      '("Ubuntu" "DejaVu Sans" "Arial")))
                                "Sans")
                    :height 140)
;;Setting font for fixed pitch
(set-face-attribute 'fixed-pitch nil
		    :font "JetBrainsMono Nerd Font"
		    :height 110
		    :weight 'medium)

;; Makes commented text and keywords  italics
(set-face-attribute 'font-lock-comment-face nil
		    :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
		    :slant 'italic)

(add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font-11"))
(setq-default line-spacing 0.12)

#+end_src

** Zooming In/Out
Using Ctrl plus =/- for zooming in and out. Also ctrl plus scroll wheel

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* EMACS SANE DEFAULTS

** Disable Menubar, Toolbar

#+begin_src emacs-lisp
(scroll-bar-mode -1)               ; disable scrollbar
(window-divider-mode 1)
(custom-set-faces
 '(vertical-border ((t (:foreground "gray")))))
(setq window-divider-default-bottom-width 1)
(setq window-divider-default-right-width 1)
(tool-bar-mode -1)                 ; disable toolbar
(tooltip-mode -1)                  ; disable tooltips
(set-fringe-mode 10)               ; give some breathing room
(menu-bar-mode -1)                 ; disable menubar
(blink-cursor-mode 0)              ; disable blinking cursor
(pixel-scroll-precision-mode 1)
(setq mouse-wheel-scroll-amount-horizontal 20)
(setq use-short-answers t) ;; When emacs asks for "yes" or "no", let "y" or "n" suffice
(setq confirm-kill-emacs 'yes-or-no-p) ;; Confirm to quit
#+end_src

#+RESULTS:
: yes-or-no-p


** Display Line Numbers and Truncated Lines

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
(setq truncate-lines nil)
(setq display-line-numbers-type 'relative)
#+end_src

** Backups

#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

** Minibuffer escape
#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

** Electric
#+begin_src emacs-lisp
(delete-selection-mode 1)
(electric-indent-mode -1)
(electric-pair-mode 1)
(setq org-edit-src-content-indentation 0)

(defun my-org-electric-pair-hook ()
  (add-function :before-until (local 'electric-pair-inhibit-predicate)
                (lambda (c) (eq c ?<))))

(add-hook 'org-mode-hook #'my-org-electric-pair-hook)

#+end_src

** UNDO-FU

#+begin_src emacs-lisp
(use-package undo-fu)
#+end_src

* ORG MODE

#+begin_src emacs-lisp
(setq font-lock-multiline t)
(setq jit-lock-defer-time 0) ; Immediate fontification
(setq fast-but-imprecise-scrolling nil)

(use-package org
  :ensure nil
  :config
  ;; Fold all drawers (e.g., PROPERTIES, LOGBOOK) by default
  (setq org-startup-folded t)              ;; fold on open [web:1]
  (setq org-cycle-hide-drawers 'all)
  (setq org-src-fontify-natively t)
  (setq org-log-done 'note)
  (setq org-confirm-babel-evaluate nil)
  (add-hook 'org-babel-after-execute-hook #'org-display-inline-images)
  :custom  
  (jit-lock-defer-time nil)
  ;; ;; Stealth fontification kicks in quickly
  ;; (jit-lock-stealth-time 0.2)
  ;; (jit-lock-stealth-nice 0.1)
  ;; (jit-lock-stealth-load 200)
  ;; ;; Ensure maximum chunks get refontified eagerly
  (jit-lock-chunk-size 5000)
  )      
#+end_src


** EVIL ORG

#+begin_src emacs-lisp
(use-package evil-org
  :diminish evil-org-mode
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme))))

#+end_src

** Enabling Table of Content

#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
 
** Enabling Org Bullets

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Source Code Block Expansion
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(require 'org-tempo)

(tempo-define-template "jupyter-python"
                       '("#+begin_src jupyter-python :tangle temp.py :session py :async yes"
                         n p n
                         "#+end_src")
                       "<jpy"
                       "Insert Jupyter Python block"
                       'org-tempo-tags)

(tempo-define-template "python"
                       '("#+begin_src python :tangle temp.py :session py :results output"
                         n p n
                         "#+end_src")
                       "<py"
                       "Insert Python block"
                       'org-tempo-tags)

(tempo-define-template "emacs-lisp"
                       '("#+begin_src emacs-lisp"
                         n p n
                         "#+end_src")
                       "<el"
                       "Insert Emacs Lisp block"
                       'org-tempo-tags)
#+end_src

** MODERN ORG
#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :hook (org-mode . org-modern-mode)
  :config
  ;; Customize as needed
  (modify-all-frames-parameters
   '((right-divider-width . 0)
     (internal-border-width . 0)))
  (dolist (face '(window-divider
                  window-divider-first-pixel
                  window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))
  (setq org-modern-todo t)
  (setq org-modern-tag t)
  (setq org-modern-fold-stars 
        '(("" . "")     ; Down arrow when folded, right arrow when expanded
          ("" . "") 
          ("" . "")
          ("" . "")
          ("" . "")))
  (setq ;;org-modern-star '("◉" "○" "✸" "✿")
        org-modern-table t 
	org-ellipsis " "
        org-modern-checkbox '((?X . "") (?- . "❍") (\s . "☐"))
        org-modern-block-fringe nil 
        org-modern-priority
        '((?A . "󱗗")  ;; High
          (?B . "󰐃")  ;; Medium
          (?C . "󰒲")))) ;; Low 

(use-package org-modern-indent
  :ensure (:host github :repo "jdtsmith/org-modern-indent")
  :config ; add late to hook
  (org-modern-indent-mode 1)
  (add-hook 'org-mode-hook #'org-modern-indent-mode t))

#+end_src


** NANO Prettify
#+begin_src emacs-lisp
(use-package svg-lib
  :ensure t
  :config
)
  
(use-package svg-tag-mode
  :hook (org-mode . svg-tag-mode)
  :config
  (setq svg-tag-tags
        '(("\\[\\[id:[^]]+\\]\\[\\(:[^]:]+:\\)\\]\\]" . 
        ;; '(("\\[\\[id:[^]]+\\]\\[:\\([^]:]+\\):\\]\\]" . 
           ((lambda (tag)
              (svg-tag-make tag
			    :beg 1
                            :end -1
                            :face 'org-tag
                            :margin 0
                            :radius 0
                            :padding 0)))))))

#+end_src

#+RESULTS:
: [nil 26877 53480 944868 nil elpaca-process-queues nil nil 205000 nil]

** OLIVETTI (Centering)

#+begin_src emacs-lisp
(use-package olivetti
  :ensure t
  :diminish olivetti-mode
  :bind (("<left-margin> <mouse-1>" . ignore)
         ("<right-margin> <mouse-1>" . ignore)
         ("C-c {" . olivetti-shrink)
         ("C-c }" . olivetti-expand)
         ("C-c |" . olivetti-set-width))
  :custom
  (olivetti-body-width 0.65)          ; 70% of window width
  (olivetti-minimum-body-width 80)   ; Minimum width in characters
  (olivetti-recall-visual-line-mode-entry-state t)
  :hook
  ((text-mode . olivetti-mode)
   (markdown-mode . olivetti-mode)
   (org-mode . olivetti-mode)))

#+end_src

** ORG-AGENDA
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-agenda-files (directory-files-recursively "~/Notes/Agenda" "\\.org$"))
  (setq org-agenda-skip-timestamp-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-scheduled-if-deadline-is-shown t
        org-agenda-skip-timestamp-if-deadline-is-shown t)
  (setq org-agenda-span 1
        org-agenda-start-day "+0d")
(setq org-agenda-current-time-string "")
(setq org-agenda-time-grid '((daily) () "" "")))
#+end_src



** ORG-SUPERTAG

#+begin_src emacs-lisp
;; (use-package org-supertag
;;   :ensure (org-supertag :host github :repo "yibie/org-supertag")
;;   :defer t
;;   :init
;;   ;; Index these directories; adjust to preferred note roots.
;;   (setq org-supertag-sync-directories '("~/Notes/"))
;;   :commands
;;   (org-supertag-view-node
;;    org-supertag-query
;;    org-supertag-view-kanban
;;    org-supertag-view-discover
;;    org-supertag-view-chat-open)
;;   :hook
;;   (org-mode . (lambda ()
;;                 (require 'org-supertag)
;;                 (local-set-key (kbd "C-c s n") #'org-supertag-view-node)
;;                 (local-set-key (kbd "C-c s q") #'org-supertag-query)
;;                 (local-set-key (kbd "C-c s k") #'org-supertag-view-kanban)
;;                 (local-set-key (kbd "C-c s d") #'org-supertag-view-discover)
;;                 (local-set-key (kbd "C-c s c") #'org-supertag-view-chat-open)))
;;   :config
;;   ;; Example: custom field type
;;   (setq org-supertag-sync-directories '("~/Notes"))
;;   (setq org-supertag-data  '("~/Notes"))
;;   (setq org-supertag-data-directory "~/Notes/.supertag")
;;   (setq supertag-data-directory "~/Notes/.supertag")
;;   (add-to-list 'org-supertag-field-types
;;                '(rating . (:validator org-supertag-validate-rating
;;                            :formatter org-supertag-format-rating
;;                            :description "Rating (1-5)")))
;; )

#+end_src

** ORG ROAM

#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :demand t
  :custom
  (org-roam-directory (file-truename "~/Notes"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol)
  (setq org-roam-capture-templates
        '(
;; Plain Template
("d" "default" plain "%?"
:target 
(
file+head "Unfiled/${slug}.org"
"#+TITLE: ${title}
,#+filetags: %^{Tags}
,#+STARTUP: showall
"
)
:unnarrowed t)


("r" "roam-tag" plain "%?"
:target 
(
file+head "TopLevelTopics/${slug}.org"
"#+TITLE: ${title}
,#+filetags: roam-tag %^{Tags}
,#+STARTUP: showall
"
)
:unnarrowed t)

;; Template for Person
("p" "person" plain "%?"
:target 
(
file+head "People/${slug}.org"                              
"
:PROPERTIES:
:ROAM_ALIASES: \"${fullname}\"
:DATE: \"%<%d-%m-%Y-(%H-%M-%S)>\"
:END:
,#+TITLE: ${title}
,#+filetags: %^{Tags}
,#+OPTIONS: toc:2
,#+STARTUP: showall
,* TABLE OF CONTENTS :toc:
"
)
           :unnarrowed t
           )
	  
;; Template for Agenda Board
("a" "Agenda Board" plain "%?"
:target 
(
file+head "Agenda/${slug}.org"                              
"
:PROPERTIES:
:ROAM_ALIASES: \"${Project Board}\"
:DATE: \"%<%d-%m-%Y-(%H-%M-%S)>\"
:END:
,#+TITLE: ${title}
,#+filetags: %^{Tags}
,#+STARTUP: showall
,#+OPTIONS: toc:2
,* TABLE OF CONTENTS :toc:
"
)
:unnarrowed t
)

;; Agenda Task Template
("t" "Agenda Task" entry
"* TODO ${Task Name}%?
DEADLINE: %^t
:PROPERTIES:
:DATE: %<%d-%m-%Y-(%H-%M-%S)>
:END:
"
:target (file "Agenda/${slug}.org")
:unnarrowed t)

("n" "literature note" plain "%?"
:target
(file+head "%(expand-file-name (or citar-org-roam-subdir \"\\ResearchNotes\") org-roam-directory)/${citar-citekey}.org"
"
:PROPERTIES:
:AUTHOR: ${citar-author}
:DATE_PUBLISHED: ${citar-date}
:END:\n
,#+TITLE: ${citar-title}
,#+filetags: Research %^{Tags}
\n\n"
)
:unnarrowed t)

)))

#+end_src

*** ORG-ROAM-TOGGLE-AND-FOCUS
#+begin_src emacs-lisp
(defun org-roam-buffer-toggle-and-focus ()
  "Toggle the org-roam buffer and switch focus to it."
  (interactive)
  (org-roam-buffer-toggle)
  (let ((roam-buffer (get-buffer "*org-roam*")))
    (when (and roam-buffer (not (eq (current-buffer) roam-buffer)))
      (pop-to-buffer roam-buffer))))

#+end_src

#+RESULTS:
: org-roam-buffer-toggle-and-focus

*** ORG-ROAM-CONSULT
#+begin_src emacs-lisp
(use-package consult-org-roam
   :ensure t
   :after org-roam
   :init
   (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   ;; Use `ripgrep' for searching with `consult-org-roam-search'
   (consult-org-roam-grep-func #'consult-ripgrep)
   ;; Configure a custom narrow key for `consult-buffer'
   (consult-org-roam-buffer-narrow-key ?r)
   ;; Display org-roam buffers right after non-org-roam buffers
   ;; in consult-buffer (and not down at the bottom)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize
    consult-org-roam-find-by-title
    consult-org-roam-file-find      
    consult-org-roam-backlinks       
    consult-org-roam-forward-links
    :preview-key "M-.")
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n B" . consult-org-roam-backlinks-recursive)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search))

(defun consult-org-roam-find-by-title ()
  "Find an Org Roam node by searching titles only.
This gives preference to exact title matches by temporarily excluding
tags from the candidate string presented to the completion framework."
  (interactive)
  (let ((org-roam-node-display-template "${title}"))
    (org-roam-node-visit (consult-org-roam-node-read))))

#+end_src

#+RESULTS:
: consult-org-roam-find-by-title


*** ORG-ROAM-TAGS
I dont know how it does this tag conversion yet but it works
#+begin_src emacs-lisp
(cl-defun org-roam-tag-node-insert(&optional filter-fn &key templates info)
  "Insert org-roam link with description wrapped in colons."
  (interactive)
  (unwind-protect
      (atomic-change-group
        (let* (region-text
               beg end
               (_ (when (region-active-p)
                    (setq beg (set-marker (make-marker) (region-beginning)))
                    (setq end (set-marker (make-marker) (region-end)))
                    (setq region-text (org-link-display-format 
                                       (buffer-substring-no-properties beg end)))))
               (node (org-roam-node-read region-text filter-fn))
               (description (or region-text
				(org-roam-node-formatted node))))
          (if (org-roam-node-id node)
              (progn
                (when region-text
                  (delete-region beg end)
                  (set-marker beg nil)
                  (set-marker end nil))
                (let ((id (org-roam-node-id node)))
                  (insert (concat "" (org-link-make-string
                                       (concat "id:" id)
                                       (concat "  :" description ":  "))
                                  "  "))  ; Add colons here
                  (run-hook-with-args 'org-roam-post-node-insert-hook
                                      id
                                      description)))
            (org-roam-capture-
             :node node
             :info info
             :templates templates
             :props (append
                     (when (and beg end) 
                       (list :region (cons beg end)))
                     (list :link-description description
                           :finalize 'insert-link))))))
    (deactivate-mark)))

;; (advice-add 'org-roam-node-insert :override #'org-roam-node-insert-custom)
#+end_src

#+RESULTS:
: org-roam-tag-node-insert

*** ORG-ROAM-NAVIGATE
Lifted from  https://ag91.github.io/blog/2021/03/12/find-org-roam-notes-via-their-relations/
#+begin_src emacs-lisp
;; (defun my/navigate-note (arg &optional node choices)
;;   "Navigate notes by link. With universal ARG tries to use only to navigate the tags of the current note. Optionally takes a selected NOTE and filepaths CHOICES."
;;   (interactive "P")
;;   (let* ((depth (if (numberp arg) arg 1))
;;          (choices
;;           (or choices
;;               (when arg
;;                 (-map #'org-roam-backlink-target-node (org-roam-backlinks-get (org-roam-node-from-id (or (ignore-errors (org-roam-node-id node))
;;                                                                                                          (org-id-get-create))))))))
;;          (all-notes (org-roam-node--completions))
;;          (completions
;;           (or (--filter (-contains-p choices (cdr it)) all-notes) all-notes))
;;          (next-node
;;           ;; taken from org-roam-node-read
;;           (let* ((nodes completions)
;;                  (node (completing-read
;;                         "Node: "
;;                         (lambda (string pred action)
;;                           (if (eq action 'metadata)
;;                               '(metadata
;;                                 (annotation-function . (lambda (title)
;;                                                          (funcall org-roam-node-annotation-function
;;                                                                   (get-text-property 0 'node title))))
;;                                 (category . org-roam-node))
;;                             (complete-with-action action nodes string pred))))))
;;             (or (cdr (assoc node nodes))
;;                 (org-roam-node-create :title node)))
;;           )
;;          )
;;     (if (equal node next-node)
;;         (org-roam-node-visit node)
;;       (my/navigate-note nil next-node (cons next-node (-map #'org-roam-backlink-source-node (org-roam-backlinks-get next-node)))))))
#+end_src

** ORG NOTER

#+begin_src emacs-lisp
(use-package org-noter
  :ensure t
  :config
  (setq org-noter-notes-search-path '("~/Notes/ResearchNotes"))
  (setq org-noter-highlight-selected-text t)
)

;; (use-package org-pdftools
;;   :hook (org-mode . org-pdftools-setup-link))

;; (use-package org-noter-pdftools
;;   :after org-noter
;;   :config
;;   (with-eval-after-load 'pdf-annot
;;     (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

*** ORG ROAM UI

#+begin_src emacs-lisp
(use-package org-roam-ui
  :ensure
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src


** ORG TRANSCLUSION

#+begin_src emacs-lisp
(use-package org-transclusion
  :after org
  :hook (org-mode . org-transclusion-mode))
#+end_src

#+RESULTS:


** ANSI SUPPORT
#+begin_src emacs-lisp
;; (require 'ansi-color)

;; (defun my-ansi-colorize-buffer ()
;;   (ansi-color-apply-on-region (point-min) (point-max)))

;; (add-hook 'org-babel-after-execute-hook
;;           (lambda ()
;;             (when (eq major-mode 'org-mode)
;;               (save-excursion
;;                 (goto-char (org-babel-where-is-src-block-result nil nil))
;;                 (when (looking-at org-babel-result-regexp)
;;                   (let ((beg (match-end 0))
;;                         (end (org-babel-result-end)))
;;                     (ansi-color-apply-on-region beg end)))))))
#+end_src

* WHICH-KEY

#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit nil 
        which-key-separator " → " ))
#+end_src


* SUDO EDIT
Sudo-edit gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.
#+begin_src emacs-lisp
(use-package sudo-edit
  :config 
  (leader-key
    "fu" '(sudo-edit-find-file :wk "Sudo find file")
    "fU" '(sudo-edit :wk "Sudo Edit File")))
#+end_src


* ICONS 
 
** NERD ICONS  
#+begin_src emacs-lisp
(use-package nerd-icons
  :ensure t)

(use-package nerd-icons-completion
  :ensure t
  :after marginalia
  :config
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

(use-package nerd-icons-corfu
  :ensure t
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

(use-package nerd-icons-dired
  :ensure t
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+end_src


* VERTICO 
Nicer M-x menu

#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode)

 ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  (setq vertico-count 10)

  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize t
        ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
        vertico-cycle t))
#+end_src

** ZOXIDE

#+begin_src emacs-lisp
(use-package zoxide
  :config
  :custom
  (zoxide-add-to-history t))
#+end_src


* MARGINALIA

#+begin_src emacs-lisp
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :ensure t
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  ;; The :init section is always executed.
  :init
  (marginalia-mode))
#+end_src


* ORDERLESS

#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless basic))
  (setq completion-category-defaults nil)
  (setq completion-category-overrides 
        '((file (styles partial-completion orderless))))) 
#+end_src


* PRESCIENT

Enabling Frequency + Recency Sorting of options in vertico 

#+begin_src emacs-lisp
(use-package prescient
  :config
  (prescient-persist-mode))

(use-package vertico-prescient
  :after vertico
  :config
  (vertico-prescient-mode))
#+end_src


* CONSULT
#+begin_src emacs-lisp
(use-package consult

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Tweak the register preview for `consult-register-load',
  ;; `consult-register-store' and the built-in commands.  This improves the
  ;; register formatting, adds thin separator lines, register sorting and hides
  ;; the window mode line.
  (advice-add #'register-preview :override #'consult-register-window)
  (setq register-preview-delay 0.5)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (setq consult-buffer-sources '(consult--source-buffer))
  (consult-customize
   consult-theme :preview-key '(:debounce 0.1 any)
   consult-ripgrep consult-git-grep consult-grep consult-man
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key "M-."
   ;;:preview-key '(:debounce 0.4 any)
)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"
  
  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
)


(defun consult-fd-windows ()
  "Run consult-fd searching from home directory."
  (interactive)
  (let ((default-directory "/mnt/c/Users"))
    (consult-fd)))


(defun consult-find-home ()
  "Run consult-fd searching from home directory."
  (interactive)
  (let ((default-directory "~/"))
    (consult-find)))
#+end_src

#+RESULTS:
: consult-find-home


* EMBARK 
#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  ;; Add Embark to the mouse context menu. Also enable `context-menu-mode'.
  ;; (context-menu-mode 1)
  ;; (add-hook 'context-menu-functions #'embark-context-menu 100)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src


* SHELLS AND TERMINALS


** Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#TODO: VTERM
#+begin_src emacs-lisp
(use-package vterm
:ensure t
:config
(setq vterm-shell (or (executable-find "zsh") "/bin/zsh"))
(setq vterm-max-scrollback 5000)
(setq vterm-shell-args '("-l"))
:hook ((vterm-mode . (lambda () (display-line-numbers-mode 0)))))

(use-package vterm-toggle
  :ensure t
  :config
  (setq vterm-toggle-fullscreen-p t))

#+end_src


* THEMING
** Doom Themes

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :custom
  ;; Global settings (defaults)
  (doom-themes-enable-bold t)   ; if nil, bold is universally disabled
  (doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; for treemacs users
  (doom-themes-treemacs-theme "doom-nord") ; use "doom-colors" for less minimal icon theme
  :config
  (load-theme 'doom-nord-aurora t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (nerd-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** Doom modeline setups

#+begin_src emacs-lisp

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
;; If non-nil, cause imenu to see `doom-modeline' declarations.
;; This is done by adjusting `lisp-imenu-generic-expression' to
;; include support for finding `doom-modeline-def-*' forms.
;; Must be set before loading doom-modeline.
(setq doom-modeline-support-imenu t)

;; How tall the mode-line should be. It's only respected in GUI.
;; If the actual char height is larger, it respects the actual height.
(setq doom-modeline-height 25)

;; How wide the mode-line bar should be. It's only respected in GUI.
(setq doom-modeline-bar-width 4)

;; Whether to use hud instead of default bar. It's only respected in GUI.
(setq doom-modeline-hud nil)

;; The limit of the window width.
;; If `window-width' is smaller than the limit, some information won't be
;; displayed. It can be an integer or a float number. `nil' means no limit."
(setq doom-modeline-window-width-limit 85)

;; Override attributes of the face used for padding.
;; If the space character is very thin in the modeline, for example if a
;; variable pitch font is used there, then segments may appear unusually close.
;; To use the space character from the `fixed-pitch' font family instead, set
;; this variable to `(list :family (face-attribute 'fixed-pitch :family))'.
(setq doom-modeline-spc-face-overrides nil)

;; How to detect the project root.
;; nil means to use `default-directory'.
;; The project management packages have some issues on detecting project root.
;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
;; to hanle sub-projects.
;; You can specify one if you encounter the issue.
(setq doom-modeline-project-detection 'auto)

;; Determines the style used by `doom-modeline-buffer-file-name'.
;;
;; Given ~/Projects/FOSS/emacs/lisp/comint.el
;;   auto => emacs/l/comint.el (in a project) or comint.el
;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
;;   truncate-with-project => emacs/l/comint.el
;;   truncate-except-project => ~/P/F/emacs/l/comint.el
;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
;;   truncate-all => ~/P/F/e/l/comint.el
;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
;;   relative-from-project => emacs/lisp/comint.el
;;   relative-to-project => lisp/comint.el
;;   file-name => comint.el
;;   file-name-with-project => FOSS|comint.el
;;   buffer-name => comint.el<2> (uniquify buffer name)
;;
;; If you are experiencing the laggy issue, especially while editing remote files
;; with tramp, please try `file-name' style.
;; Please refer to https://github.com/bbatsov/projectile/issues/657.
(setq doom-modeline-buffer-file-name-style 'auto)

;; Whether display icons in the mode-line.
;; While using the server mode in GUI, should set the value explicitly.
(setq doom-modeline-icon t)

;; Whether display the icon for `major-mode'. It respects option `doom-modeline-icon'.
(setq doom-modeline-major-mode-icon t)

;; Whether display the colorful icon for `major-mode'.
;; It respects `nerd-icons-color-icons'.
(setq doom-modeline-major-mode-color-icon t)

;; Whether display the icon for the buffer state. It respects option `doom-modeline-icon'.
(setq doom-modeline-buffer-state-icon t)

;; Whether display the modification icon for the buffer.
;; It respects option `doom-modeline-icon' and option `doom-modeline-buffer-state-icon'.
(setq doom-modeline-buffer-modification-icon t)

;; Whether display the lsp icon. It respects option `doom-modeline-icon'.
(setq doom-modeline-lsp-icon t)

;; Whether display the time icon. It respects option `doom-modeline-icon'.
(setq doom-modeline-time-icon t)

;; Whether display the live icons of time.
;; It respects option `doom-modeline-icon' and option `doom-modeline-time-icon'.
(setq doom-modeline-time-live-icon t)

;; Whether to use an analogue clock svg as the live time icon.
;; It respects options `doom-modeline-icon', `doom-modeline-time-icon', and `doom-modeline-time-live-icon'.
(setq doom-modeline-time-analogue-clock t)

;; The scaling factor used when drawing the analogue clock.
(setq doom-modeline-time-clock-size 0.7)

;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
(setq doom-modeline-unicode-fallback nil)

;; Whether display the buffer name.
(setq doom-modeline-buffer-name t)

;; Whether highlight the modified buffer name.
(setq doom-modeline-highlight-modified-buffer-name t)

;; When non-nil, mode line displays column numbers zero-based.
;; See `column-number-indicator-zero-based'.
(setq doom-modeline-column-zero-based t)

;; Specification of \"percentage offset\" of window through buffer.
;; See `mode-line-percent-position'.
(setq doom-modeline-percent-position '(-3 "%p"))

;; Format used to display line numbers in the mode line.
;; See `mode-line-position-line-format'.
(setq doom-modeline-position-line-format '("%l"))

;; Format used to display column numbers in the mode line.
;; See `mode-line-position-column-format'.
(setq doom-modeline-position-column-format '("C%c"))

;; Format used to display combined line/column numbers in the mode line. See `mode-line-position-column-line-format'.
(setq doom-modeline-position-column-line-format '("%l:%c"))

;; Whether display the minor modes in the mode-line.
(setq doom-modeline-minor-modes nil)

;; If non-nil, a word count will be added to the selection-info modeline segment.
(setq doom-modeline-enable-word-count nil)

;; Major modes in which to display word count continuously.
;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
;; remove the modes from `doom-modeline-continuous-word-count-modes'.
(setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

;; Whether display the buffer encoding.
(setq doom-modeline-buffer-encoding t)

;; Whether display the indentation information.
(setq doom-modeline-indent-info nil)

;; Whether display the total line number。
(setq doom-modeline-total-line-number nil)

;; Whether display the icon of vcs segment. It respects option `doom-modeline-icon'."
(setq doom-modeline-vcs-icon t)

;; The maximum displayed length of the branch name of version control.
(setq doom-modeline-vcs-max-length 15)

;; The function to display the branch name.
(setq doom-modeline-vcs-display-function #'doom-modeline-vcs-name)

;; Alist mapping VCS states to their corresponding faces.
;; See `vc-state' for possible values of the state.
;; For states not explicitly listed, the `doom-modeline-vcs-default' face is used.
(setq doom-modeline-vcs-state-faces-alist
      '((needs-update . (doom-modeline-warning bold))
        (removed . (doom-modeline-urgent bold))
        (conflict . (doom-modeline-urgent bold))
        (unregistered . (doom-modeline-urgent bold))))

;; Whether display the icon of check segment. It respects option `doom-modeline-icon'.
(setq doom-modeline-check-icon t)

;; If non-nil, only display one number for check information if applicable.
(setq doom-modeline-check-simple-format nil)

;; The maximum number displayed for notifications.
(setq doom-modeline-number-limit 99)

;; Whether display the project name. Non-nil to display in the mode-line.
(setq doom-modeline-project-name t)

;; Whether display the workspace name. Non-nil to display in the mode-line.
(setq doom-modeline-workspace-name t)

;; Whether display the perspective name. Non-nil to display in the mode-line.
(setq doom-modeline-persp-name t)

;; If non nil the default perspective name is displayed in the mode-line.
(setq doom-modeline-display-default-persp-name nil)

;; If non nil the perspective name is displayed alongside a folder icon.
(setq doom-modeline-persp-icon t)

;; Whether display the `lsp' state. Non-nil to display in the mode-line.
(setq doom-modeline-lsp t)

;; Whether display the GitHub notifications. It requires `ghub' package.
(setq doom-modeline-github nil)

;; The interval of checking GitHub.
(setq doom-modeline-github-interval (* 30 60))

;; Whether display the modal state.
;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
(setq doom-modeline-modal t)

;; Whether display the modal state icon.
;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
(setq doom-modeline-modal-icon t)

;; Whether display the modern icons for modals.
(setq doom-modeline-modal-modern-icon t)

;; When non-nil, always show the register name when recording an evil macro.
(setq doom-modeline-always-show-macro-register nil)

;; Whether display the gnus notifications.
(setq doom-modeline-gnus t)

;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
(setq doom-modeline-gnus-timer 2)

;; Wheter groups should be excludede when gnus automatically being updated.
(setq doom-modeline-gnus-excluded-groups '("dummy.group"))

;; Whether display the IRC notifications. It requires `circe' or `erc' package.
(setq doom-modeline-irc t)

;; Function to stylize the irc buffer names.
(setq doom-modeline-irc-stylize 'identity)

;; Whether display the battery status. It respects `display-battery-mode'.
(setq doom-modeline-battery t)

;; Whether display the time. It respects `display-time-mode'.
(setq doom-modeline-time t)

;; Whether display the misc segment on all mode lines.
;; If nil, display only if the mode line is active.
(setq doom-modeline-display-misc-in-all-mode-lines t)

;; The function to handle `buffer-file-name'.
(setq doom-modeline-buffer-file-name-function #'identity)

;; The function to handle `buffer-file-truename'.
(setq doom-modeline-buffer-file-truename-function #'identity)

;; Whether display the environment version.
(setq doom-modeline-env-version t)
;; Or for individual languages
(setq doom-modeline-env-enable-python t)
(setq doom-modeline-env-enable-ruby t)
(setq doom-modeline-env-enable-perl t)
(setq doom-modeline-env-enable-go t)
(setq doom-modeline-env-enable-elixir t)
(setq doom-modeline-env-enable-rust t)

;; Change the executables to use for the language version string
(setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
;;(setq doom-modeline-env-ruby-executable "ruby")
;;(setq doom-modeline-env-perl-executable "perl")
;;(setq doom-modeline-env-go-executable "go")
;;(setq doom-modeline-env-elixir-executable "iex")
;;(setq doom-modeline-env-rust-executable "rustc")

;; What to display as the version while a new one is being loaded
(setq doom-modeline-env-load-string "...")

;; By default, almost all segments are displayed only in the active window. To
;; display such segments in all windows, specify e.g.

;; Hooks that run before/after the modeline version string is updated
(setq doom-modeline-before-update-env-hook nil)
(setq doom-modeline-after-update-env-hook nil)

#+end_src


* FILEMANAGER
#+begin_src emacs-lisp
(use-package dirvish
  :after evil
  :init (dirvish-override-dired-mode))
#+end_src

** NEOTREE 


Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  NeoTree provides following themes: classic, ascii, arrow, icons, and nerd.  Theme can be config'd by setting "two" themes for neo-theme: one for the GUI and one for the terminal.  I like to use 'SPC t' for 'toggle' keybindings, so I have used 'SPC t n' for toggle-neotree.

| COMMAND        | DESCRIPTION                 | KEYBINDING |
|----------------+--------------------------  -+------------|
| neotree-toggle | /Toggle neotree/            | SPC t n    |
| neotree- dir   | /Open directory in neotree/ | SPC d n    |

#+BEGIN_SRC emacs-lisp
(use-package neotree
 :config
 (setq neo-smart-open t
       neo-show-hidden-files t
       neo-window-width 35
       neo-window-fixed-size nil
       inhibit-compacting-font-caches t
       projectile-switch-project-action 'neotree-projectile-action) 
 (setq neo-theme (if (display-graphic-p) 'nerd-icons))
       ;; truncate long file names in neotree
       (add-hook 'neo-after-create-hook
          #'(lambda (_)
              (with-current-buffer (get-buffer neo-buffer-name)
                (setq truncate-lines t)
                (setq word-wrap nil)
                (make-local-variable 'auto-hscroll-mode)
                (setq auto-hscroll-mode nil)))))

#+end_src


* FLYCHECK
Modern on-the-fly syntax checking extension for GNU Emacs

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :config (add-hook 'after-init-hook #'global-flycheck-mode))
#+end_src


* TREE-SITTER
#+begin_src emacs-lisp
(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode)
  (setq treesit-language-source-alist
        '((javascript "https://github.com/tree-sitter/tree-sitter-javascript"))))
#+end_src


* LSPs

#+begin_src emacs-lisp
(use-package lsp-bridge
  :ensure nil 
  :hook
  (org-mode . lsp-bridge-mode)
  ;; Ensure src-edit buffers (C-c ') get lsp-bridge
  (org-src-mode . (lambda () (lsp-bridge-mode 1)))
  :init
  (setq lsp-bridge-enable-diagnostics t
        lsp-bridge-enable-signature-help t
        lsp-bridge-enable-hover-diagnostic t
        lsp-bridge-enable-auto-format-code nil
        lsp-bridge-enable-completion-in-minibuffer nil
        lsp-bridge-enable-log nil
        lsp-bridge-org-babel-lang-list '("python" "nix" "tex" "csharp")
        lsp-bridge-enable-org-babel t   ;; enable completion in org-babel src blocks
        lsp-bridge-use-popup t
        lsp-bridge-python-lsp-server "pylsp"
	lsp-bridge-nix-lsp-server "nil"
	lsp-bridge-tex-lsp-server "texlab"
        lsp-bridge-csharp-lsp-server "omnisharp-roslyn")
  )

;; Python support 
;; (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
;; (add-hook 'python-ts-mode-hook #'lsp-bridge-mode)
;; (add-hook 'LaTeX-mode-hook #'lsp-bridge-mode)

;; Python support (lazy load)
(use-package python
  :ensure nil
  :mode ("\\.py\\'" . python-mode)
  :hook ((python-mode . (lambda ()
                          (require 'lsp-bridge)
                          (lsp-bridge-mode 1)))
         (python-ts-mode . (lambda ()
                             (require 'lsp-bridge)
                             (lsp-bridge-mode 1))))) 

;; LaTeX support (lazy load)
(add-hook 'LaTeX-mode-hook
          (lambda ()
            (require 'lsp-bridge)
            (lsp-bridge-mode 1)))



;; Nix integration
(use-package nix-mode
  :ensure t
  :mode "\\.nix\\'"
  :hook (nix-mode . lsp-bridge-mode))

;; C# integration (tree-sitter mode only)
(add-hook 'csharp-ts-mode-hook #'lsp-bridge-mode)

;;org-babel support
(with-eval-after-load 'org
  (add-to-list 'org-src-lang-modes '("jupyter-python" . python))
  (add-to-list 'org-src-lang-modes '("jupyter-R" . ess-r)))

#+end_src


#+begin_src emacs-lisp
(use-package ess
  :ensure t)
#+end_src

** YASNIPPET
#+begin_src 
;; Packages you need

#+end_src


* PROJECTILE
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.
 
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode -1))
#+end_src


* DASHBOARD

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-footer nil)
  (setq dashboard-set-navigator t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-startup-banner "~/.dotfiles/emacs/NixOS.png")  ;; use custom image as banner
  (setq dashboard-image-banner-max-height 200)
  (setq dashboard-image-banner-max-width 200)
  (setq dashboard-projects-backend 'projectile)
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (projects . 3)
                          ))
  
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src


* JUPYTER

#+begin_src emacs-lisp
(use-package jupyter
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (shell . t)
       (jupyter . t)
       (R . t))))
  :config
  (require 'ob-jupyter)
  (org-babel-jupyter-aliases-from-kernelspecs)
  (setq org-confirm-babel-evaluate nil
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-src-preserve-indentation t)
  )

#+end_src

#+RESULTS:
: [nil 26866 38434 76692 nil elpaca-process-queues nil nil 898000 nil]


* RAINBOW MODE

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src


* LATEX

#+begin_src emacs-lisp
(use-package auctex
  :defer t
  :config
  ;; Basic AUCTeX settings
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-master nil)
  
  ;; PDF viewer configuration
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
  (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))
  (setq TeX-source-correlate-start-server t)
  ;; Auto-refresh PDF buffer after compilation
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  ;; Academic writing specific settings
  (setq LaTeX-babel-hyphen nil) ; Prevent issues with academic citations
  (setq LaTeX-electric-left-right-brace t)
  (setq TeX-electric-escape nil)
  
  ;; Preview settings for academic documents
  (setq preview-scale-function 1.2)
  (setq preview-default-option-list '("displaymath" "floats" "graphics" "textmath" "sections" "footnotes"))
  (setq-default TeX-output-dir "build")
  ;; Enable folding for large academic documents
  (add-hook 'LaTeX-mode-hook 'TeX-fold-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode))
#+end_src


** Pdf-Tools

#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :magic ("%PDF". pdf-view-mode)
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t)
  (setq pdf-cache-image-limit 15)
  (setq pdf-view-resize-factor 1.1)
  
  ;; Sync settings
  (setq pdf-sync-forward-display-action
        '(display-buffer-reuse-window (reusable-frames . t)))
  (setq pdf-sync-backward-display-action
        '(display-buffer-reuse-window (reusable-frames . t)))
  
  :bind (:map pdf-view-mode-map
         ("C-s" . isearch-forward)
         ("h" . pdf-annot-add-highlight-markup-annotation)
         ("t" . pdf-annot-add-text-annotation)
         ("D" . pdf-annot-delete))
  
  :hook (pdf-view-mode . (lambda ()
                           (cua-mode 0)
                           (display-line-numbers-mode 0))))

#+end_src

** Citar
#+begin_src emacs-lisp
(use-package citar
  :bind (("C-c b" . citar-insert-citation)
         :map minibuffer-local-map
         ("M-b" . citar-insert-preset))
  :defer t
  :custom

  ;; Point to your bibliography files
  (citar-bibliography '("~/Notes/Files/Library.bib"))
  
  ;; PDF and note directories for academic papers
  (citar-library-paths '("~/Notes/Files/"))
  (citar-notes-paths '("~/Notes/ResearchNotes"))
  
  ;; Academic citation formats
  (citar-at-point-function 'embark-act)
  :hook
  (LaTeX-mode . citar-capf-setup)
  (org-mode . citar-capf-setup))

(defun citar-org-noter-open ()
  "Select a reference from Citar, open its PDF, and start an Org-noter session."
  (interactive)
  (require 'citar)
  (require 'org-noter)
  (let* ((key (citar-select-ref))
         (files-hash (citar-get-files key))
         (files (when (hash-table-p files-hash)
                  (flatten-list (hash-table-values files-hash))))
         (file (car files)))
    (if (and file (file-exists-p file))
        (progn
          ;; Open the PDF
          (find-file file)
          ;; Start Org-noter
          (org-noter))
      (message "No PDF found for entry: %s" key))))

 #+end_src 


*** CITAR ORG ROAM

#+begin_src emacs-lisp
(use-package citar-org-roam
  :after (citar org-roam)
  :config 
  (setq citar-org-roam-capture-template-key "n")
  (setq citar-org-roam-note-title-template "${title}")
  (citar-org-roam-mode))
#+end_src

*** CITAR EMBARK

#+begin_src emacs-lisp
(use-package citar-embark
  :after citar embark
  :config (citar-embark-mode))
#+end_src

** Misc writing tools

#+begin_src emacs-lisp
;; Word count for academic papers
(use-package wc-mode
  :hook (LaTeX-mode . wc-mode)
  :config
  (setq wc-modeline-format "WC[%tw/%tcw]"))

(use-package langtool
  :bind ("C-c g" . langtool-check)
  :config
  (setq langtool-language-tool-jar nil)  ; Don't use JAR file
  (setq langtool-java-classpath nil)     ; Use command-line tool instead
  (setq langtool-bin "languagetool-commandline")  ; Use the executable
  (setq langtool-default-language "en-US"))
#+end_src


* GIT

#+begin_src emacs-lisp
(use-package git-timemachine
  :ensure (:host codeberg :repo "pidu/git-timemachine")
  :defer t
)
#+end_src


* TRANSIENT
Its a built-in emacs package, its here only so that elpaca can manage it instead of emacs package manager
#+begin_src emacs-lisp
(use-package transient
  :ensure t)
#+end_src


* DEADGREP
#+begin_src emacs-lisp
(use-package deadgrep
  :ensure t
  :bind (("C-c H" . deadgrep)))
#+end_src


* SPACIOUS PADDING

#+begin_src emacs-lisp
(use-package spacious-padding
  :ensure t
  :config
  (spacious-padding-mode 1)
  (setq spacious-padding-widths
      '(;; Adjust other padding values as you see fit
        :internal-border-width 15
        :header-line-width 4
        :mode-line-width 6
        :tab-width 4
        :scroll-bar-width 4
        ;; Set the divider width to 1 to make it visible
        :right-divider-width 10))
)
#+end_src


* Prettifying 
Lifted from [[https://sophiebos.io/posts/prettifying-emacs-org-mode/][Sophie Bosio]]

#+begin_src emacs-lisp
(defun my/prettify-symbols-setup ()

  ;; Drawers
  (push '(":PROPERTIES:" . "") prettify-symbols-alist)
  (push '(":ROAM_ALIASES:" . "") prettify-symbols-alist)
  (push '(":ID:" . "") prettify-symbols-alist)
  (push '(":DATE:" . "") prettify-symbols-alist)
  (push '(":DATE_PUBLISHED:" . "") prettify-symbols-alist)
  (push '(":AUTHOR:" . "") prettify-symbols-alist)
  (push '(":ROAM_REFS:" . "") prettify-symbols-alist)
  (push '(":END:" . "") prettify-symbols-alist)
  ;; Tags
  (push '(":projects:" . " ") prettify-symbols-alist)
  (push '(":work:"     . " ") prettify-symbols-alist)
  (push '(":inbox:"    . " ") prettify-symbols-alist)
  (push '(":task:"     . " ") prettify-symbols-alist)
  (push '(":thesis:"   . " ") prettify-symbols-alist)
  (push '(":learn:"    . " ") prettify-symbols-alist)
  (push '(":code:"     . " ") prettify-symbols-alist)

  (set-face-attribute 'org-drawer nil :height 1.3)
  (set-face-attribute 'org-special-keyword nil :height 1.3)
  (prettify-symbols-mode))

(add-hook 'org-mode-hook        #'my/prettify-symbols-setup)
(add-hook 'org-agenda-mode-hook #'my/prettify-symbols-setup)
#+end_src

#+begin_src emacs-lisp
(setenv "JUPYTER_PATH" "/home/nixos/.local/share/jupyter/kernels")
#+end_src

* TODO 
https://github.com/emacs-vs/codemetrics
https://github.com/emacs-vs/line-reminder
https://github.com/emacs-vs/rainbow-csv
https://github.com/rougier/nano-mu4e
https://github.com/rougier/notebook-mode


* NANO ELFEED

* ORG KANBAN

#+begin_src emacs-lisp
(use-package org-kanban
  :ensure t
  :after org
  :commands (org-kanban/initialize
             org-kanban/initialize-at-end
             org-kanban/shift)
  :config
  ;; Optional: Set mirrored to nil if you want the board the other way around
  ;; (setq org-kanban/mirrored nil)
  )
#+end_src
